---
# Installs the kubernetes components for the control plane and the workers
# This script assumes docker is already installed using install_docker.yml

# Step 1: Install pre-requisites for all nodes in the cluster
- hosts: master.local worker1.local worker2.local
  become: yes
  vars:
    k8s_url_apt_key: "https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key"
    k8s_gpgpath: /usr/share/keyrings/kubernetes-apt-keyring.gpg
    k8s_repository: "https://pkgs.k8s.io/core:/stable:/v1.28/deb/"
    crio_url_apt_key: "https://pkgs.k8s.io/addons:/cri-o:/prerelease:/main/deb/Release.key"
    crio_gpgpath: /usr/share/keyrings/cri-o-apt-keyring.gpg
    crio_repository: "https://pkgs.k8s.io/addons:/cri-o:/prerelease:/main/deb/"
    crictl_version: "v1.28.0"
    k8s_packages:
    - kubernetes-cni
    - kubelet

  tasks:
    - name: Install qemu qemu-guest-agent package
      apt:
        name: qemu-guest-agent
        state: present
      
    - name: install_prerequisites
      apt:
        name:
          - ca-certificates
          - curl
          - apt-transport-https
          - gnupg
          - software-properties-common
        update_cache: yes

    - name: Create the k8s.conf module file
      ansible.builtin.blockinfile:
        path: /etc/modules-load.d/k8s.conf
        create: yes
        prepend_newline: true
        block: |
          overlay
          br_netfilter

    - name: Add the overlay module
      community.general.modprobe:
        name: overlay
        state: present
    
    - name: Add the br_netfilter module
      community.general.modprobe:
        name: br_netfilter
        state: present
    
    - name: params required by setup, params persist across reboots
      ansible.builtin.blockinfile:
        path: /etc/sysctl.d/k8s.conf
        create: yes
        prepend_newline: true
        block: |
          net.bridge.bridge-nf-call-iptables  = 1
          net.bridge.bridge-nf-call-ip6tables = 1
          net.ipv4.ip_forward                 = 1
    - name: apply sysctl settings without rebooting
      ansible.builtin.command: sysctl --system

    - name: Get cri-o package key
      shell: curl -fsSL {{ crio_url_apt_key }} | gpg --dearmor -o {{ crio_gpgpath }}
      args:
        creates: "{{ crio_gpgpath }}"

    - name: Install cri-o repository
      apt_repository:
        filename: cri-o
        repo: "deb [signed-by={{ crio_gpgpath }}] {{ crio_repository }} /"

    - name: Install Kubernetes Packages
      package: 
        name: cri-o 
        state: present 
        force: yes 
        install_recommends: no

    - name: Make sure the cri-o service is running (also at reboot)
      ansible.builtin.systemd_service:
        state: started
        daemon_reload: true
        enabled: true
        name: cri-o
    
    - name: Get Kubernetes package key
      shell: curl -fsSL {{ k8s_url_apt_key }} | gpg --dearmor -o {{ k8s_gpgpath }}
      args:
        creates: "{{ k8s_gpgpath }}"

    - name: Install Kubernetes repository
      apt_repository:
        filename: kubernetes
        repo: "deb [signed-by={{ k8s_gpgpath }}] {{ k8s_repository }} /"

    - name: Install Kubernetes Packages
      package: name={{ item }} state=present force=yes install_recommends=no
      loop: "{{ k8s_packages }}"

    - name: Downloading and extracting {{ crictl_app }} {{ crictl_version }}
      ansible.builtin.unarchive:
        src: "https://github.com/kubernetes-sigs/cri-tools/releases/download/{{crictl_version}}/crictl-{{crictl_version}}-linux-amd64.tar.gznf"
        dest: "/usr/local/bin"
        owner: "ubuntu"
        group: "users"
        extra_opts:
          - crictl
        remote_src: yes

    - name: Add existing IpAdress to kubelet args
      ansible.builtin.lineinfile:
        path: /etc/default/kubelet
        regexp: '^KUBELET_EXTRA_ARGS='
        line: KUBELET_EXTRA_ARGS=--node-ip={{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}
        create: yes

# Step 2: Install kubeadm on the master and configure it
- hosts: master.local
  become: yes
  vars:
    k8s_packages:
    - kubeadm
  tasks:
    - name: Install Kubernetes Master Packages
      package: name={{ item }} state=present force=yes install_recommends=no
      loop: "{{ k8s_packages }}"

    - name: Initialize Kubernetes master
      command: kubeadm init --pod-network-cidr=10.244.0.0/16
      register: kubeadm_output
      ignore_errors: yes

    - name: Set up kubectl for the current user
      command: "{{ item }}"
      with_items:
        - "mkdir -p $HOME/.kube"
        - "cp /etc/kubernetes/admin.conf $HOME/.kube/config"
        - "chown $(id -u):$(id -g) $HOME/.kube/config"

    - name: Install Calico network plugin
      command: kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml
      when: "'calico' in kubeadm_output.stdout"

# Step 3: join the workers in the cluster
- hosts: worker1.local worker2.local
  become: yes
  tasks:
    - name: Join worker nodes to the cluster
      command: "{{ hostvars['master']['kubeadm_output']['stdout_lines'][0] }}"
      when: "'kubeadm join' in hostvars['master']['kubeadm_output']['stdout']"